#!/usr/bin/env python

import sys
from smount.smount import SerialMounter

def log(command, arg, message):
    print(f"{command} of '{arg}': {message}")

# pylint: disable-next=too-many-branches
def execute(mounter, command, arg) -> int:
    ret = 99
    if command == "list":
        available = mounter.get_mount_points()
        for i in available:
            print(f"{i}")
        ret = 0
    elif command == "mount":
        mount = mounter.get(arg)
        if mount is None:
            log(command, arg, 'could not be found')
            ret = 127
        elif mount.ismounted():
            log(command, arg, 'is already mounted')
            ret = 0
        elif mount.mount():
            log(command, arg, 'success')
            ret = 0
        else:
            log(command, arg, 'failed to mount')
            ret = 1
    elif command == "help":
        print("Available commands: list, mount, unmount")
        ret = 0
    elif command in ["umount", "unmount"]:
        mount = mounter.get(arg)
        if mount is None:
            log(command, arg, 'could not be found')
            ret = 127
        elif not mount.ismounted():
            log(command, arg, 'is not mounted')
            ret = 0
        elif mount.unmount():
            log(command, arg, 'success')
            ret = 0
        else:
            log(command, arg, 'failed to unmount')
            ret = 1
    else:
        print(f"Unknown command {command}")
        ret = 2

    return ret


def main(argv):
    mounter = SerialMounter()
    command = None
    arg = None

    if len(argv) == 1:
        mount_points = mounter.get_mount_points()
        while True:
            for i, mount_point in enumerate(mount_points):
                print(f"{i} - {mount_point}")

            try:
                selected = input("select> ")
            except KeyboardInterrupt:
                selected = 'q'  # CTRL-C
            except EOFError:
                selected = 'q'  # CTRL-D

            if selected == 'q':
                sys.exit(0)
            if selected in ['r', '']:
                continue

            if int(selected) > len(mount_points) or int(selected) < 0:
                raise RuntimeError

            point = mount_points[int(selected)]
            point.toggle()
        return

    if len(argv) >= 2:
        command = argv[1]

    if len(argv) >= 3:
        arg = argv[2]

    sys.exit(execute(mounter, command, arg))


if __name__ == "__main__":
    # execute only if run as a script
    main(sys.argv)
